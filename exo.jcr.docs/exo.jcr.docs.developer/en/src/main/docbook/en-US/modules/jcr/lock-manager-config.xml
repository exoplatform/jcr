<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="JCR.LockManagerConfiguration">
  <title>LockManager configuration</title>

  <para>What LockManager does?</para>

  <para>In general, LockManager stores Lock objects, so it can give a Lock
  object or can release it.</para>

  <para>Also, LockManager is responsible for removing Locks that live too
  long. This parameter may be configured with "time-out" property.</para>

  <para>JCR provides one basic implementations of LockManager:</para>

  <itemizedlist>
    <listitem>
      <para><classname>org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl</classname></para>
    </listitem>
  </itemizedlist>

  <section id="JCR.LockManagerConfiguration.CacheableLockManagerImpl">
    <title>CacheableLockManagerImpl</title>

    <para>CacheableLockManagerImpl stores Lock objects in JBoss-cache, so
    Locks are replicable and affect on cluster, not only a single node. Also,
    JBoss-cache has JDBCCacheLoader, so Locks will be stored to the
    database.</para>

    <para>You can enable LockManager by adding lock-manager-configuration to
    workspace-configuration.</para>

    <para>For example:</para>

    <programlisting language="xml">&lt;workspace name="ws"&gt;
   ...
   &lt;lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl"&gt;
      &lt;properties&gt;
         &lt;property name="time-out" value="15m" /&gt;
         ...
      &lt;/properties&gt;
   &lt;/lock-manager&gt;               
   ...
&lt;/workspace&gt;</programlisting>

    <para>Wher <emphasis>time-out</emphasis> parameter represents interval to
    remove Expired Locks. LockRemover separates threads, that periodically ask
    LockManager to remove Locks that live so long.</para>

    <section id="JCR.LockManagerConfiguration.CacheableLockManagerImpl.Configuration">
      <title>Configuration</title>

      <para>The configuration uses the template JBoss-cache configuration for
      all LockManagers.</para>

      <para><citetitle>Lock template configuration</citetitle></para>

      <para><filename>test-jbosscache-lock.xml</filename></para>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1"&gt;

   &lt;locking useLockStriping="false" concurrencyLevel="500" lockParentForChildInsertRemove="false"
      lockAcquisitionTimeout="20000" /&gt;

   &lt;clustering mode="replication" clusterName="${jbosscache-cluster-name}"&gt;
      &lt;stateRetrieval timeout="20000" fetchInMemoryState="false" /&gt;
      &lt;sync /&gt;
   &lt;/clustering&gt;

   &lt;loaders passivation="false" shared="true"&gt;
      &lt;!-- All the data of the JCR locks needs to be loaded at startup --&gt;
      &lt;preload&gt;
         &lt;node fqn="/" /&gt;
      &lt;/preload&gt;  
      &lt;!--
      For another cache-loader class you should use another template with
      cache-loader specific parameters
      -&gt;
      &lt;loader class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.JDBCCacheLoader" async="false" fetchPersistentState="false"
         ignoreModifications="false" purgeOnStartup="false"&gt;
         &lt;properties&gt;
            cache.jdbc.table.name=${jbosscache-cl-cache.jdbc.table.name}
            cache.jdbc.table.create=${jbosscache-cl-cache.jdbc.table.create}
            cache.jdbc.table.drop=${jbosscache-cl-cache.jdbc.table.drop}
            cache.jdbc.table.primarykey=${jbosscache-cl-cache.jdbc.table.primarykey}
            cache.jdbc.fqn.column=${jbosscache-cl-cache.jdbc.fqn.column}
            cache.jdbc.fqn.type=${jbosscache-cl-cache.jdbc.fqn.type}
            cache.jdbc.node.column=${jbosscache-cl-cache.jdbc.node.column}
            cache.jdbc.node.type=${jbosscache-cl-cache.jdbc.node.type}
            cache.jdbc.parent.column=${jbosscache-cl-cache.jdbc.parent.column}
            cache.jdbc.datasource=${jbosscache-cl-cache.jdbc.datasource}
         &lt;/properties&gt;
      &lt;/loader&gt;
   &lt;/loaders&gt;
&lt;/jbosscache&gt;</programlisting>

      <note>
        <para>To prevent any consistency issue regarding the lock data +
        please ensure that your cache loader is
        <emphasis>org.exoplatform.services.jcr.impl.core.lock.jbosscache.JDBCCacheLoader</emphasis>
        and that your database engine is transactional.</para>
      </note>

      <para>As you see, all configurable parameters are filled by templates
      and will be replaced by LockManagers configuration parameters:</para>

      <programlisting language="xml">&lt;lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl"&gt;
   &lt;properties&gt;
      &lt;property name="time-out" value="15m" /&gt;
      &lt;property name="jbosscache-configuration" value="test-jbosscache-lock.xml" /&gt;
      &lt;property name="jgroups-configuration" value="udp-mux.xml" /&gt;
      &lt;property name="jgroups-multiplexer-stack" value="true" /&gt;
      &lt;property name="jbosscache-cluster-name" value="JCR-cluster-locks-ws" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks_ws" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.table.create" value="true" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.table.drop" value="false" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.table.primarykey" value="jcrlocks_ws_pk" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.fqn.type" value="AUTO"/&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.node.column" value="node" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.node.type" value="AUTO"/&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.datasource" value="jdbcjcr" /&gt;
      &lt;property name="jbosscache-cl-cache.jdbc.dialect" value="${dialect}" /&gt;
      &lt;property name="jbosscache-shareable" value="true" /&gt;
   &lt;/properties&gt;
&lt;/lock-manager&gt;</programlisting>

      <para>Configuration requirements:<itemizedlist>
          <listitem>
            <para><parameter>jbosscache-cl-cache.jdbc.fqn.column</parameter>
            and <parameter>jbosscache-cl-cache.jdbc.node.type</parameter> is
            the same as cache.jdbc.fqn.type and cache.jdbc.node.type in
            JBoss-Cache configuration. You can set those data types according
            to your database type or set it as AUTO (or do not set at all) and
            data type will be detected automatically.</para>
          </listitem>

          <listitem>
            <para>As you see, jgroups-configuration is moved to separate the
            configuration file - udp-mux.xml. In this case, the udp-mux.xml
            file is a common JGroup configuration for all components
            (QueryHandler, Cache, LockManager), but we can still create our
            own configuration.</para>
          </listitem>
        </itemizedlist></para>

      <para><filename>our udp-mux.xml</filename></para>

      <programlisting language="xml">&lt;config&gt;
    &lt;UDP
         singleton_name="JCR-cluster" 
         mcast_addr="${jgroups.udp.mcast_addr:228.10.10.10}"
         mcast_port="${jgroups.udp.mcast_port:45588}"
         tos="8" 
         ucast_recv_buf_size="20000000"
         ucast_send_buf_size="640000" 
         mcast_recv_buf_size="25000000" 
         mcast_send_buf_size="640000" 
         loopback="false"
         discard_incompatible_packets="true" 
         max_bundle_size="64000" 
         max_bundle_timeout="30"
         use_incoming_packet_handler="true" 
         ip_ttl="${jgroups.udp.ip_ttl:2}"
         enable_bundling="false" 
         enable_diagnostics="true"
         thread_naming_pattern="cl" 

         use_concurrent_stack="true" 

         thread_pool.enabled="true" 
         thread_pool.min_threads="2"
         thread_pool.max_threads="8" 
         thread_pool.keep_alive_time="5000" 
         thread_pool.queue_enabled="true"
         thread_pool.queue_max_size="1000"
         thread_pool.rejection_policy="discard"

         oob_thread_pool.enabled="true"
         oob_thread_pool.min_threads="1"
         oob_thread_pool.max_threads="8"
         oob_thread_pool.keep_alive_time="5000"
         oob_thread_pool.queue_enabled="false" 
         oob_thread_pool.queue_max_size="100" 
         oob_thread_pool.rejection_policy="Run" /&gt;

    &lt;PING timeout="2000"
            num_initial_members="3"/&gt;
    &lt;MERGE2 max_interval="30000"
            min_interval="10000"/&gt;
   &lt;FD_SOCK /&gt;
   &lt;FD timeout="10000" max_tries="5" shun="true" /&gt;
   &lt;VERIFY_SUSPECT timeout="1500" /&gt;
   &lt;BARRIER /&gt;
    &lt;pbcast.NAKACK use_stats_for_retransmission="false"
                   exponential_backoff="150"
                   use_mcast_xmit="true" gc_lag="0"
                   retransmit_timeout="50,300,600,1200"
                   discard_delivered_msgs="true"/&gt;
   &lt;UNICAST timeout="300,600,1200" /&gt;
    &lt;pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000"
                   max_bytes="1000000"/&gt;
   &lt;VIEW_SYNC avg_send_interval="60000" /&gt;
    &lt;pbcast.GMS print_local_addr="true" join_timeout="3000"
                shun="false"
                view_bundling="true"/&gt;
    &lt;FC max_credits="500000"
                    min_threshold="0.20"/&gt;
   &lt;FRAG2 frag_size="60000" /&gt;
   &lt;!--pbcast.STREAMING_STATE_TRANSFER /--&gt;
   &lt;pbcast.STATE_TRANSFER /&gt;
   &lt;pbcast.FLUSH /&gt;
&lt;/config&gt;</programlisting>
    </section>

    <section id="datatypes">
      <title id="datatypes.title">Data Types in Different Databases</title>

      <table>
        <title>FQN type and node type in different databases</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>DataBase name</entry>

              <entry>Node data type</entry>

              <entry>FQN data type</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>default</entry>

              <entry>BLOB</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>HSSQL</entry>

              <entry>OBJECT</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>MySQL</entry>

              <entry>LONGBLOB</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>ORACLE</entry>

              <entry>BLOB</entry>

              <entry>VARCHAR2(512)</entry>
            </row>

            <row>
              <entry>PostgreSQL/PostgrePlus</entry>

              <entry>bytea</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>MSSQL</entry>

              <entry>VARBINARY(MAX)</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>DB2</entry>

              <entry>BLOB</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>Sybase</entry>

              <entry>IMAGE</entry>

              <entry>VARCHAR(512)</entry>
            </row>

            <row>
              <entry>Ingres</entry>

              <entry>long byte</entry>

              <entry>VARCHAR(512)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="LockMigrationFrom1.12.x">
      <title>Lock migration from 1.12.x</title>

      <para>There are 3 choices:</para>

      <para>I. When new Shareable Cache feature is not going to be used and
      all locks should be kept after migration.</para>

      <itemizedlist>
        <listitem>
          <para>Ensure that the same lock tables used in configuration;</para>
        </listitem>

        <listitem>
          <para>Start the server;</para>
        </listitem>
      </itemizedlist>

      <para>II. When new Shareable Cache feature is not going to be used and
      all locks should be removed after migration.</para>

      <itemizedlist>
        <listitem>
          <para>Ensure that the same lock tables used in configuration;</para>
        </listitem>

        <listitem>
          <para>Start the sever WITH system property
          -Dorg.exoplatform.jcr.locks.force.remove=true;</para>
        </listitem>

        <listitem>
          <para>Stop the server;</para>
        </listitem>

        <listitem>
          <para>Start the server (WITHOUT system property
          -Dorg.exoplatform.jcr.locks.force.remove);</para>
        </listitem>
      </itemizedlist>

      <para>III. When new Shareable Cache feature will be used (in this case
      all locks are removed after migration).</para>

      <itemizedlist>
        <listitem>
          <para>Start the sever WITH system property
          -Dorg.exoplatform.jcr.locks.force.remove=true;</para>
        </listitem>

        <listitem>
          <para>Stop the server;</para>
        </listitem>

        <listitem>
          <para>Start the server (WITHOUT system property
          -Dorg.exoplatform.jcr.locks.force.remove);</para>
        </listitem>

        <listitem>
          <para>(Not mandatory) manually remove old tables for lock;</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
